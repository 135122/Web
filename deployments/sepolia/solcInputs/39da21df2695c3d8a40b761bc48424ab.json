{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\ncontract FundMe {\n    mapping (address=>uint256) public funderToAmounts;\n    uint256 MINIMUM_VALUE = 100 * 10 ** 18; // USD\n    uint256 constant Target = 1000 * 10 ** 18;\n    AggregatorV3Interface public dataFeed;\n\n    uint256 deploymentTimestamp;\n    uint256 locktime;\n    address erc20Adder;\n    address public owner;\n    bool public  getFundSucess;\n    uint256 public w;\n    uint256 public t;\n    uint256 public o;\n    uint256 public p;\n    constructor(uint256 _locktime,address dataFeedAddr){\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        owner = msg.sender;\n        deploymentTimestamp = block.timestamp;\n        locktime = _locktime;\n    } \n\n    function fund() external payable {\n        require(block.timestamp - deploymentTimestamp < locktime,\"window is closed \");\n        require(convertEthToUsd(msg.value) >= MINIMUM_VALUE,\"Send more ETH\");\n        funderToAmounts[msg.sender] = msg.value;\n    }\n\n\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function convertEthToUsd(uint256 ethAmount) internal  returns(uint256) {\n\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        o = ethPrice;\n        p = ethAmount;\n        return ethPrice*ethAmount/(10**16);\n    }\n    function getFund() external windowClosed onlyOwer{\n        \n        require(convertEthToUsd(address(this).balance) >= Target,\"Target is not reachrd\");\n        w = convertEthToUsd(address(this).balance);\n        t = Target;\n        \n        //payable(msg.sender).transfer(address(this).balance);\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success,\"tx failed\");\n        bool sucess;\n        (sucess,) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(sucess,\"transfer tx failed\");\n        getFundSucess = true; // flag\n    }\n    function transferOwnership(address newOwer) public onlyOwer{\n        owner = newOwer;\n    }\n\n    function refund() external windowClosed {\n        require(convertEthToUsd(address(this).balance) < Target,\"Target is not reachrd\");\n        require(funderToAmounts[msg.sender] != 0,\"there is no fund for you\"); \n        bool sucess;\n        (sucess,) = payable(msg.sender).call{value:funderToAmounts[msg.sender]}(\"\");\n        require(sucess,\"transfer tx failed\");\n        funderToAmounts[msg.sender] = 0;\n\n    }\n\n    function setFunderToAmount(address funder, uint256 amountToUpdate)   external  {\n            require(msg.sender == erc20Adder , \"you do not have permission to call this function\");\n            funderToAmounts[funder] = amountToUpdate;\n    }\n    function setERC20Adder(address _erc20Addr) public onlyOwer{\n        erc20Adder =_erc20Addr; \n    }\n    modifier windowClosed() {\n        require(block.timestamp - deploymentTimestamp >= locktime,\"window is no closed \");\n        _;\n    }\n\n    modifier onlyOwer(){\n        require(msg.sender == owner,\"This function can only be called by owner\");\n        _;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}